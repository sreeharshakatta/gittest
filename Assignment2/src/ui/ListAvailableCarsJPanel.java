/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import carfleetmanager.carDetails;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author katta
 */
public class ListAvailableCarsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListAvailableCarsJPanel
     */
    public ListAvailableCarsJPanel() {
        initComponents();
        Integer avlblCnt = 0;
        Integer unAvlblCnt = 0;
//        File file = new File("C:\\Users\\katta\\OneDrive\\Documents\\NetBeansProjects\\Assignment2\\src\\config\\carData.json");
//        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        ArrayList<String> cityList = new ArrayList<String>();
        String[] columns = {"Serial Num", "Manufacturer", "Model Num", "Year of Manf", "Min Seats", "Max Seats"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        try {
            Gson gson = new Gson();
            BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\katta\\OneDrive\\Documents\\NetBeansProjects\\Assignment2\\src\\config\\carData.json"));
            List<carDetails> cars = new Gson().fromJson(bufferedReader, new TypeToken<List<carDetails>>() {
            }.getType());
            for (carDetails detail : cars) {
                if (cityList.contains(detail.getCity())) {
                    ;
                } else {
                    cityList.add(detail.getCity());
                }
                if ("true".equalsIgnoreCase(detail.getAvailable())) {
                    avlblCnt = avlblCnt + 1;
                } else if ("false".equalsIgnoreCase(detail.getAvailable())) {
                    unAvlblCnt = unAvlblCnt + 1;
                } else {
                    ;
                }
//                Vector<String> row = new Vector<String>();
//                row.add(detail.getAvailable());
//                row.add(detail.getManufacturer());
//                row.add(detail.getCity());
//                model.addRow(row);
            }
            cityList.add(0, "");
            txtAvailable.setText(avlblCnt.toString());
            txtUnavailable.setText(unAvlblCnt.toString());
//            txtLastCatalogUpdate.setText(sdf.format(file.lastModified()).toString());
//            txtLastCatalogUpdate.setEditable(false);
            txtAvailable.setEditable(false);
            txtUnavailable.setEditable(false);
            cbCity.setModel(new javax.swing.DefaultComboBoxModel<>(cityList.toArray(new String[0])));
//            jTableFirstAvailableCar.setModel(model);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCity = new javax.swing.JLabel();
        cbCity = new javax.swing.JComboBox<>();
        lblAvailable = new javax.swing.JLabel();
        lblNotAvailable = new javax.swing.JLabel();
        txtAvailable = new javax.swing.JTextField();
        txtUnavailable = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFirstAvailableCar = new javax.swing.JTable();
        lblFirstAvailableCar = new javax.swing.JLabel();

        lblCity.setText("City:");

        cbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCityActionPerformed(evt);
            }
        });

        lblAvailable.setText("Available:");

        lblNotAvailable.setText("Not Available:");

        txtAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAvailableActionPerformed(evt);
            }
        });

        txtUnavailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnavailableActionPerformed(evt);
            }
        });

        jTableFirstAvailableCar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Serial Num", "Manufacturer", "Model Number", "Year of Manf", "Min Seats", "Max Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableFirstAvailableCar);

        lblFirstAvailableCar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblFirstAvailableCar.setText("First Available Car");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 200, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(148, 148, 148))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblFirstAvailableCar)
                        .addGap(312, 312, 312))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(lblCity)
                        .addGap(18, 18, 18)
                        .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblAvailable)
                            .addComponent(lblNotAvailable))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(291, 291, 291))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAvailable)
                    .addComponent(txtAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNotAvailable)
                    .addComponent(txtUnavailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(99, 99, 99)
                .addComponent(lblFirstAvailableCar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(180, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAvailableActionPerformed

    private void txtUnavailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnavailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnavailableActionPerformed

    private void cbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCityActionPerformed
        // TODO add your handling code here:
        Integer avlblCnt = 0;
        Integer unAvlblCnt = 0;
        String selectedValue = cbCity.getSelectedItem().toString();
        String[] columns = {"Serial Num", "Manufacturer", "Model Num", "Year of Manf", "Min Seats", "Max Seats"};
        boolean rowAdd = false;
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        try {
            Gson gson = new Gson();
            BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\katta\\OneDrive\\Documents\\NetBeansProjects\\Assignment2\\src\\config\\carData.json"));
            List<carDetails> cars = new Gson().fromJson(bufferedReader, new TypeToken<List<carDetails>>() {
            }.getType());
            for (carDetails detail : cars) {
                Vector<String> row = new Vector<String>();
                String city = detail.getCity();
                if (city.equalsIgnoreCase(selectedValue) && "true".equalsIgnoreCase(detail.getAvailable())) {
                    if (!rowAdd) {
                        row.add(detail.getSerialNumber());
                        row.add(detail.getManufacturer());
                        row.add(detail.getModelNumber());
                        row.add(detail.getManfYear().toString());
                        row.add(detail.getMinSeats().toString());
                        row.add(detail.getMaxSeats().toString());
                        model.addRow(row);
                        rowAdd = true;
                    } else {;
                    }

                } else if (selectedValue.isBlank()) {
                    ;
                } else {;
                }
                if (("true".equalsIgnoreCase(detail.getAvailable()) && city.equalsIgnoreCase(selectedValue)) || (selectedValue.isBlank() && "true".equalsIgnoreCase(detail.getAvailable()))) {
                    avlblCnt = avlblCnt + 1;
                } else if ("false".equalsIgnoreCase(detail.getAvailable()) && city.equalsIgnoreCase(selectedValue) || (selectedValue.isBlank() && "false".equalsIgnoreCase(detail.getAvailable()))) {
                    unAvlblCnt = unAvlblCnt + 1;
                } else {
                    ;
                }

            }
//            cityList.add(0, "");
//            jComboBoxCity.setModel(new javax.swing.DefaultComboBoxModel<>(cityList.toArray(new String[0])));
            txtAvailable.setText(avlblCnt.toString());
            txtUnavailable.setText(unAvlblCnt.toString());
            txtAvailable.setEditable(false);
            txtUnavailable.setEditable(false);
            jTableFirstAvailableCar.setModel(model);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cbCityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbCity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFirstAvailableCar;
    private javax.swing.JLabel lblAvailable;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblFirstAvailableCar;
    private javax.swing.JLabel lblNotAvailable;
    private javax.swing.JTextField txtAvailable;
    private javax.swing.JTextField txtUnavailable;
    // End of variables declaration//GEN-END:variables
}
