/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import carfleetmanager.carDetails;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import java.util.stream.Collectors;

/**
 *
 * @author katta
 */
public class ListAllCarsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form listAllCarsJFrame
     */
    public ListAllCarsJPanel() {
        initComponents();
//        jTableListCars.setVisible(false);
        ArrayList<String> cityList = new ArrayList<String>();
        String[] columns = {"Serial Num", "Manufacturer", "Model Num","Year of Manf","Min Seats","Max Seats","MC Expiry Date","City","Available"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        try {
            Gson gson = new Gson();
            BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\katta\\OneDrive\\Documents\\NetBeansProjects\\Assignment2\\src\\config\\carData.json"));
            List<carDetails> cars = new Gson().fromJson(bufferedReader, new TypeToken<List<carDetails>>() {
            }.getType());
            for (carDetails detail : cars) {
                if (cityList.contains(detail.getCity())) {
                    ;
                } else {
                    cityList.add(detail.getCity());
                }
                Vector<String> row = new Vector<String>();
                row.add(detail.getSerialNumber());
                row.add(detail.getManufacturer());
                row.add(detail.getModelNumber());
                row.add(detail.getManfYear().toString());
                row.add(detail.getMinSeats().toString());
                row.add(detail.getMaxSeats().toString());
                row.add(detail.getMcExpiryDate());
                row.add(detail.getCity());
                if (detail.getAvailable().equalsIgnoreCase("true")){
                row.add("YES");
                }
                else{
                row.add("NO");
                }
                model.addRow(row);
            }
            cityList.add(0, "");
            jComboBoxCity.setModel(new javax.swing.DefaultComboBoxModel<>(cityList.toArray(new String[0])));
            jTableListCars.setModel(model);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

//        String[] columns={"available","manufacturer"};
//        DefaultTableModel model = new DefaultTableModel(columns, 0);
//        try{
//        Gson gson = new Gson();
//        BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\katta\\OneDrive\\Documents\\NetBeansProjects\\Assignment2\\src\\config\\carData.json"));
////        carDetails js = gson.fromJson(bufferedReader, carDetails.class);
//        List<carDetails> users = new Gson().fromJson(bufferedReader, new TypeToken<List<carDetails>>() {}.getType());
//        for( carDetails detail : users) 
//{
//    Vector<String> row = new Vector<String>();
//    row.add(detail.getAvailable());
//    row.add(detail.getManufacturer());
//    model.addRow( row );
//}
//        jTableListCars.setModel(model);
//        } catch (Exception ex) {
//    ex.printStackTrace();
////}
////        
//    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jTableListCars = new javax.swing.JTable();
        jComboBoxCity = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        jTableListCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(jTableListCars);

        jComboBoxCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCityActionPerformed(evt);
            }
        });

        jLabel1.setText("Select City");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jComboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(351, 351, 351))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCityActionPerformed
        // TODO add your handling code here:
        String selectedValue = jComboBoxCity.getSelectedItem().toString();
        String[] columns = {"manufacturer", "available", "city"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        try {
            Gson gson = new Gson();
            BufferedReader bufferedReader = new BufferedReader(new FileReader("C:\\Users\\katta\\OneDrive\\Documents\\NetBeansProjects\\Assignment2\\src\\config\\carData.json"));
            List<carDetails> cars = new Gson().fromJson(bufferedReader, new TypeToken<List<carDetails>>() {
            }.getType());
            for (carDetails detail : cars) {
                Vector<String> row = new Vector<String>();
                String city = detail.getCity();
                if (city.equalsIgnoreCase(selectedValue)) {
                    row.add(detail.getAvailable());
                    row.add(detail.getManufacturer());
                    row.add(detail.getCity());
                    model.addRow(row);
                } else if(selectedValue.isBlank()){
                    row.add(detail.getAvailable());
                    row.add(detail.getManufacturer());
                    row.add(detail.getCity());
                    model.addRow(row);
                }
                else{;}

            }
//            cityList.add(0, "");
//            jComboBoxCity.setModel(new javax.swing.DefaultComboBoxModel<>(cityList.toArray(new String[0])));
            jTableListCars.setModel(model);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jComboBoxCityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxCity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTable jTableListCars;
    // End of variables declaration//GEN-END:variables
}
